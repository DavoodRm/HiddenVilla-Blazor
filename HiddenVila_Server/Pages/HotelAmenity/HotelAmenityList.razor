@page "/hotel-amenity"

@inject IAmenityRepository _amenityRepository;
@inject IJSRuntime JsRuntime;
@inject IFileUpload _fileUpload;
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-amenity/create" class="btn btn-info form-control">Add New Amenity</NavLink>
    </div>
</div>
<div class="row mt-4">
    <table class="table table-bordered table-hover">
        <thead>
        <tr>

            <th>Name</th>
            <th>Timming</th>
            <th>Icon</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @if (AmenityDto.Any())
        {
            foreach (var room in AmenityDto)
            {
                <tr>
                    <td>@room.Name</td>
                    <td>@room.Timming</td>
                    <td><i class="@room.IconStyle"></i></td>
                    <td>
                        <NavLink href="@($"hotel-amenity/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                        <button class="btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5"> No records found</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="@ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<HotelAmenityDTO> AmenityDto { get; set; } = new List<HotelAmenityDTO>();
    private bool IsProcessing { get; set; } = false;
    private int? AmenityRoomId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        AmenityDto = await _amenityRepository.GetAllHotelAmenity();
    }

    private async Task HandleDelete(int id)
    {
        AmenityRoomId = id;
        await  JsRuntime.ShowDeleteConfirmationModal();
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && AmenityRoomId != null)
        {
           
            await _amenityRepository.DeleteHotelAmenity(AmenityRoomId.Value);
            await JsRuntime.ToastrSuccess("Amenity Deleted successfully");
            await OnInitializedAsync();
        }
        IsProcessing = false;
        await  JsRuntime.HideDeleteConfirmationModal();

    }
}
